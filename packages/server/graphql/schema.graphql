"""The root of all... queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  movies(after: String, first: Int, before: String, last: Int): MovieConnection!
  user(recovery: String!): User
  version: String!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String
  email: String
  movies(after: String, first: Int, before: String, last: Int): MovieConnection!
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  recovery: String!
  helperSeen: Boolean
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type MovieConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MovieEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MovieEdge {
  """The item at the end of the edge."""
  node: Movie

  """A cursor for use in pagination."""
  cursor: String!
}

"""Movie data"""
type Movie implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  title: String
  genre: String
  image: String
  description: String
  average: Float
  author: User
  commentsCount: Int!
  comments(after: String, first: Int, before: String, last: Int): CommentConnection!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type CommentConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment

  """A cursor for use in pagination."""
  cursor: String!
}

"""Comment data"""
type Comment implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  text: String
  user: User
  movie: Movie
  likesCount: Int!

  """whether logged user liked this movie"""
  meHasLiked: Boolean!
  createdAt: String
  updatedAt: String
}

type Mutation {
  LoginMutation(input: LoginMutationInput!): LoginMutationPayload
  RegisterUserMutation(input: RegisterUserMutationInput!): RegisterUserMutationPayload
  UpdateUserMutation(input: UpdateUserInput!): UpdateUserPayload
  MovieCreate(input: MovieCreateInput!): MovieCreatePayload
  DeleteMovie(input: DeleteMovieInput!): DeleteMoviePayload
  PostLike(input: PostLikeInput!): PostLikePayload
  PostUnLike(input: PostUnLikeInput!): PostUnLikePayload
  CommentLike(input: CommentLikeInput!): CommentLikePayload
  CommentUnLike(input: CommentUnLikeInput!): CommentUnLikePayload
  CommentCreateMutation(input: CommentCreateMutationInput!): CommentCreateMutationPayload
}

type LoginMutationPayload {
  token: String
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input LoginMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterUserMutationPayload {
  token: String
  me: User

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input RegisterUserMutationInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UpdateUserPayload {
  success: String
  error: String
  clientMutationId: String
}

input UpdateUserInput {
  email: String!
  name: String
  password: String
  recovery: String
  helperSeen: Boolean
  clientMutationId: String
}

type MovieCreatePayload {
  movieEdge: MovieEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input MovieCreateInput {
  title: String!
  genre: String!
  image: String!
  description: String!
  average: Float!
  clientMutationId: String
}

type DeleteMoviePayload {
  error: String
  deletedId: ID
  clientMutationId: String
}

input DeleteMovieInput {
  id: String!
  clientMutationId: String
}

type PostLikePayload {
  post: Movie

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostLikeInput {
  post: ID!
  clientMutationId: String
}

type PostUnLikePayload {
  post: Movie

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input PostUnLikeInput {
  post: ID!
  clientMutationId: String
}

type CommentLikePayload {
  comment: Comment

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input CommentLikeInput {
  comment: ID!
  clientMutationId: String
}

type CommentUnLikePayload {
  comment: Comment

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input CommentUnLikeInput {
  comment: ID!
  clientMutationId: String
}

type CommentCreateMutationPayload {
  commentEdge: CommentEdge
  movie: Movie

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input CommentCreateMutationInput {
  movie: ID!
  text: String!
  clientMutationId: String
}

type Subscription {
  MovieNew(input: MovieNewInput!): MovieNewPayload
}

type MovieNewPayload {
  movie: Movie
  clientSubscriptionId: String
}

input MovieNewInput {
  clientSubscriptionId: String
}